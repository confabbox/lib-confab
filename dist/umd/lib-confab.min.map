{"version":3,"file":"lib-confab.min.js","mappings":"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","sources":["webpack://ConfabMeetJS/webpack/universalModuleDefinition","webpack://ConfabMeetJS/./index.js","webpack://ConfabMeetJS/./modules/statistics/SpeakerStats.js","webpack://ConfabMeetJS/./modules/util/AuthUtil.js","webpack://ConfabMeetJS/./modules/util/EventEmitterForwarder.js","webpack://ConfabMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://ConfabMeetJS/./modules/util/RandomUtil.js","webpack://ConfabMeetJS/./modules/util/ScriptUtil.js","webpack://ConfabMeetJS/./modules/util/StringUtils.js","webpack://ConfabMeetJS/./modules/util/UsernameGenerator.js","webpack://ConfabMeetJS/./node_modules/base64-js/index.js","webpack://ConfabMeetJS/./node_modules/bowser/es5.js","webpack://ConfabMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://ConfabMeetJS/./node_modules/events/events.js","webpack://ConfabMeetJS/./node_modules/js-md5/src/md5.js","webpack://ConfabMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://ConfabMeetJS/./node_modules/lodash.debounce/index.js","webpack://ConfabMeetJS/./node_modules/lodash.isequal/index.js","webpack://ConfabMeetJS/./node_modules/logger/lib/LogCollector.js","webpack://ConfabMeetJS/./node_modules/logger/lib/Logger.js","webpack://ConfabMeetJS/./node_modules/logger/lib/index.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://ConfabMeetJS/./node_modules/sdp-simulcast/lib/index.js","webpack://ConfabMeetJS/./node_modules/sdp-simulcast/lib/transform-utils.js","webpack://ConfabMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://ConfabMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://ConfabMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://ConfabMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://ConfabMeetJS/./node_modules/sdp/sdp.js","webpack://ConfabMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://ConfabMeetJS/../src/strophe.disco.js","webpack://ConfabMeetJS/../src/strophe.stream-management.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/index.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/v1.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/v3.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/v35.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/v4.js","webpack://ConfabMeetJS/./node_modules/uuid/dist/v5.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://ConfabMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://ConfabMeetJS/./service/RTC/BridgeVideoType.js","webpack://ConfabMeetJS/./service/RTC/CameraFacingMode.js","webpack://ConfabMeetJS/./service/RTC/CodecMimeType.js","webpack://ConfabMeetJS/./service/RTC/RTCEvents.ts","webpack://ConfabMeetJS/./service/RTC/Resolutions.js","webpack://ConfabMeetJS/./service/RTC/VideoType.ts","webpack://ConfabMeetJS/./service/authentication/AuthenticationEvents.js","webpack://ConfabMeetJS/./service/statistics/constants.ts","webpack://ConfabMeetJS/./service/xmpp/XMPPEvents.ts","webpack://ConfabMeetJS/./ConfabConferenceErrors.ts","webpack://ConfabMeetJS/./ConfabConferenceEvents.ts","webpack://ConfabMeetJS/./modules/statistics/constants.js","webpack://ConfabMeetJS/./ConfabTrackErrors.ts","webpack://ConfabMeetJS/./ConfabTrackError.js","webpack://ConfabMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://ConfabMeetJS/./service/statistics/Events.ts","webpack://ConfabMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://ConfabMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://ConfabMeetJS/./node_modules/js-utils/confab-local-storage/index.js","webpack://ConfabMeetJS/./modules/browser/BrowserCapabilities.js","webpack://ConfabMeetJS/./modules/browser/index.js","webpack://ConfabMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://ConfabMeetJS/./modules/statistics/CallStats.js","webpack://ConfabMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://ConfabMeetJS/./modules/util/MathUtil.js","webpack://ConfabMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://ConfabMeetJS/./service/RTC/MediaType.ts","webpack://ConfabMeetJS/./modules/flags/FeatureFlags.js","webpack://ConfabMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://ConfabMeetJS/./modules/statistics/statistics.js","webpack://ConfabMeetJS/./ConfabConferenceEventManager.js","webpack://ConfabMeetJS/./ConfabTrackEvents.ts","webpack://ConfabMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://ConfabMeetJS/./ConfabParticipant.js","webpack://ConfabMeetJS/./ConfabConnectionEvents.ts","webpack://ConfabMeetJS/./ConfabConnectionErrors.ts","webpack://ConfabMeetJS/./modules/util/Deferred.js","webpack://ConfabMeetJS/./modules/util/Listenable.js","webpack://ConfabMeetJS/./modules/e2ee/E2EEContext.js","webpack://ConfabMeetJS/./modules/e2ee/KeyHandler.js","webpack://ConfabMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://ConfabMeetJS/./node_modules/uuid/wrapper.mjs","webpack://ConfabMeetJS/./modules/e2ee/OlmAdapter.js","webpack://ConfabMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://ConfabMeetJS/./modules/e2ee/crypto-utils.js","webpack://ConfabMeetJS/./modules/e2ee/E2EEncryption.js","webpack://ConfabMeetJS/./modules/xmpp/Caps.js","webpack://ConfabMeetJS/./modules/connectivity/NetworkInfo.js","webpack://ConfabMeetJS/./modules/xmpp/ResumeTask.js","webpack://ConfabMeetJS/./modules/util/Retry.js","webpack://ConfabMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://ConfabMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.ping.js","webpack://ConfabMeetJS/./modules/xmpp/XmppConnection.js","webpack://ConfabMeetJS/./ConfabTranscriptionStatus.ts","webpack://ConfabMeetJS/./modules/xmpp/AVModeration.js","webpack://ConfabMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://ConfabMeetJS/./modules/xmpp/Lobby.js","webpack://ConfabMeetJS/./modules/settings/Settings.js","webpack://ConfabMeetJS/./modules/xmpp/moderator.js","webpack://ConfabMeetJS/./modules/xmpp/ChatRoom.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.emuc.js","webpack://ConfabMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://ConfabMeetJS/./service/RTC/MediaDirection.ts","webpack://ConfabMeetJS/./modules/RTC/ScreenObtainer.js","webpack://ConfabMeetJS/./modules/sdp/SDPUtil.js","webpack://ConfabMeetJS/./modules/sdp/SDP.js","webpack://ConfabMeetJS/./modules/sdp/SDPDiffer.js","webpack://ConfabMeetJS/./node_modules/async/dist/async.mjs","webpack://ConfabMeetJS/./modules/util/AsyncQueue.js","webpack://ConfabMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://ConfabMeetJS/./modules/xmpp/JingleSession.js","webpack://ConfabMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://ConfabMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.jingle.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.logger.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.rayo.js","webpack://ConfabMeetJS/./modules/xmpp/strophe.util.js","webpack://ConfabMeetJS/./modules/xmpp/xmpp.js","webpack://ConfabMeetJS/./authenticateAndUpgradeRole.js","webpack://ConfabMeetJS/./modules/RTC/CodecSelection.js","webpack://ConfabMeetJS/./modules/RTC/BridgeChannel.js","webpack://ConfabMeetJS/./modules/RTC/RTCUtils.js","webpack://ConfabMeetJS/./modules/RTC/ConfabTrack.js","webpack://ConfabMeetJS/./modules/RTC/ConfabLocalTrack.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/lib/transform.js","webpack://ConfabMeetJS/./node_modules/sdp-interop/lib/interop.js","webpack://ConfabMeetJS/./service/RTC/SignalingEvents.ts","webpack://ConfabMeetJS/./service/RTC/SignalingLayer.js","webpack://ConfabMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://ConfabMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://ConfabMeetJS/./modules/sdp/RtxModifier.js","webpack://ConfabMeetJS/./modules/sdp/SdpConsistency.js","webpack://ConfabMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://ConfabMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://ConfabMeetJS/./modules/RTC/ConfabRemoteTrack.js","webpack://ConfabMeetJS/./modules/RTC/TPCUtils.js","webpack://ConfabMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://ConfabMeetJS/./modules/RTC/RTC.js","webpack://ConfabMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://ConfabMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://ConfabMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://ConfabMeetJS/./modules/detection/DetectionEvents.ts","webpack://ConfabMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://ConfabMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://ConfabMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://ConfabMeetJS/./modules/detection/TrackVADEmitter.js","webpack://ConfabMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://ConfabMeetJS/./modules/detection/VADNoiseDetection.js","webpack://ConfabMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://ConfabMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://ConfabMeetJS/./modules/e2eping/e2eping.js","webpack://ConfabMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://ConfabMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://ConfabMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://ConfabMeetJS/./modules/recording/recordingXMLUtils.js","webpack://ConfabMeetJS/./modules/recording/JibriSession.js","webpack://ConfabMeetJS/./modules/recording/RecordingManager.js","webpack://ConfabMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://ConfabMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://ConfabMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://ConfabMeetJS/./modules/transcription/recordingResult.js","webpack://ConfabMeetJS/./modules/transcription/trackRecorder.js","webpack://ConfabMeetJS/./modules/transcription/audioRecorder.js","webpack://ConfabMeetJS/./modules/transcription/word.js","webpack://ConfabMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://ConfabMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://ConfabMeetJS/./modules/transcription/transcriber.js","webpack://ConfabMeetJS/./modules/version/ComponentsVersions.js","webpack://ConfabMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://ConfabMeetJS/./modules/videosipgw/ConfabVideoSIPGWSession.js","webpack://ConfabMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://ConfabMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://ConfabMeetJS/./ConfabConference.js","webpack://ConfabMeetJS/./ConfabConnection.js","webpack://ConfabMeetJS/./ConfabMediaDevicesEvents.ts","webpack://ConfabMeetJS/./ConfabMediaDevices.js","webpack://ConfabMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://ConfabMeetJS/./modules/proxyconnection/constants.ts","webpack://ConfabMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://ConfabMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://ConfabMeetJS/./modules/statistics/PrecallTest.js","webpack://ConfabMeetJS/./modules/webaudio/AudioMixer.js","webpack://ConfabMeetJS/./ConfabMeetJS.js","webpack://ConfabMeetJS/./modules/recording/recordingConstants.js","webpack://ConfabMeetJS/webpack/bootstrap","webpack://ConfabMeetJS/webpack/runtime/amd options","webpack://ConfabMeetJS/webpack/runtime/compat get default export","webpack://ConfabMeetJS/webpack/runtime/define property getters","webpack://ConfabMeetJS/webpack/runtime/global","webpack://ConfabMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://ConfabMeetJS/webpack/runtime/make namespace object","webpack://ConfabMeetJS/webpack/runtime/node module decorator","webpack://ConfabMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ConfabMeetJS\"] = factory();\n\telse\n\t\troot[\"ConfabMeetJS\"] = factory();\n})(self, function() {\nreturn ","// For legacy purposes, preserve the UMD of the public API of the Confabbox\n// library (a.k.a. ConfabMeetJS).\nmodule.exports = require('./ConfabMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction ConfabGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction ConfabGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = ConfabGlobalErrorHandler;\nwindow.onunhandledrejection = ConfabGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-confab was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Creates a new Logger, without keeping track of it in the loggers list\n     * @arguments the same as Logger constructor\n     */\n    getUntrackedLogger: function(id, transports, options) {\n        return new Logger(curLevel, id, transports, options);\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {ConfabLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>ConfabRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link ConfabRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","/**\n * The errors for the conference.\n */\n\nexport enum ConfabConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = ConfabConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = ConfabConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = ConfabConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = ConfabConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = ConfabConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = ConfabConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = ConfabConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = ConfabConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = ConfabConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = ConfabConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = ConfabConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = ConfabConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = ConfabConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = ConfabConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = ConfabConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = ConfabConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = ConfabConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = ConfabConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = ConfabConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = ConfabConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum ConfabConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-confab internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {ConfabParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {ConfabParticipant} the participant that initiated the kick.\n     * @param {ConfabParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (confab-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * ConfabParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {ConfabTrack} track the added ConfabTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {ConfabParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {ConfabTrack} track the removed ConfabTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {ConfabParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {ConfabParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {ConfabParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = ConfabConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = ConfabConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = ConfabConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = ConfabConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = ConfabConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = ConfabConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = ConfabConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = ConfabConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = ConfabConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = ConfabConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = ConfabConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = ConfabConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = ConfabConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = ConfabConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = ConfabConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = ConfabConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = ConfabConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = ConfabConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = ConfabConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = ConfabConferenceEvents.JVB121_STATUS;\nexport const KICKED = ConfabConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = ConfabConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = ConfabConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = ConfabConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = ConfabConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = ConfabConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = ConfabConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = ConfabConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = ConfabConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = ConfabConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = ConfabConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = ConfabConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = ConfabConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = ConfabConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = ConfabConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = ConfabConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = ConfabConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = ConfabConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = ConfabConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = ConfabConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = ConfabConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = ConfabConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = ConfabConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = ConfabConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = ConfabConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = ConfabConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = ConfabConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = ConfabConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = ConfabConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = ConfabConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = ConfabConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = ConfabConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = ConfabConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = ConfabConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = ConfabConferenceEvents.USER_JOINED;\nexport const USER_LEFT = ConfabConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = ConfabConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = ConfabConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = ConfabConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = ConfabConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = ConfabConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = ConfabConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = ConfabConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = ConfabConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = ConfabConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = ConfabConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = ConfabConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = ConfabConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = ConfabConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = ConfabConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = ConfabConferenceEvents.BREAKOUT_ROOMS_UPDATED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the ConfabTrack objects.\n */\n\nexport enum ConfabTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = ConfabTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = ConfabTrackErrors.GENERAL;\nexport const NOT_FOUND = ConfabTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = ConfabTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = ConfabTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = ConfabTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = ConfabTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = ConfabTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = ConfabTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = ConfabTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as ConfabTrackErrors from './ConfabTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[ConfabTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a ConfabTrack. Can represent various\n * types of errors. For error descriptions (@see ConfabTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction ConfabTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = ConfabTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = ConfabTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = ConfabTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = ConfabTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = ConfabTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nConfabTrackError.prototype = Object.create(Error.prototype);\nConfabTrackError.prototype.constructor = ConfabTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default ConfabTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * confab-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          confab-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          confab-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToConfabName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.ConfabboxElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/ConfabboxNW/)) {\n        const version = userAgent.match(/ConfabboxNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToConfabName) {\n        return {\n            name: bowserNameToConfabName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToConfabName) {\n            name = bowserNameToConfabName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass ConfabLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const confabLocalStorage = new ConfabLocalStorage();\n","import { BrowserDetection } from 'js-utils';\nimport { getLogger } from 'logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-confab.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isReactNative() || (this.isElectron() && (this._getChromiumBasedVersion() < 96)));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from 'logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-confab and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'confab';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='confab'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-confab library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-confab library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-confab library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from 'logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from 'logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingOnBridgeSupported);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` SSRC rewriting supported: ${this._ssrcRewriting},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Directions are inactive and no ssrc and ssrc-groups\n     * are added to the remote description). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from 'logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        codecs[sourceName] = codecDesc;\n                    }\n                } else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            } else {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        const userCodecs = codecs[participantId] || {};\n\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport ConfabTrackError from '../../ConfabTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from ConfabTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {ConfabTrackError} error\n */\nfunction formatConfabTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        ConfabConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        ConfabConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from confabbox to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof ConfabTrackError\n            ? formatConfabTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof ConfabTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as ConfabConferenceErrors from './ConfabConferenceErrors';\nimport * as ConfabConferenceEvents from './ConfabConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {ConfabConference} the conference\n */\nexport default function ConfabConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(ConfabConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nConfabConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(ConfabConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        ConfabConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        ConfabConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        ConfabConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        ConfabConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n                ConfabConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        ConfabConferenceEvents.CONFERENCE_ERROR,\n        ConfabConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        ConfabConferenceEvents.CONFERENCE_ERROR,\n        ConfabConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.CONFERENCE_FAILED,\n                ConfabConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        ConfabConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        ConfabConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        ConfabConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        ConfabConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('confab_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        ConfabConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        ConfabConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        ConfabConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        ConfabConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        ConfabConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        ConfabConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(ConfabConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    ConfabConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                ConfabConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        ConfabConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        ConfabConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nConfabConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    ConfabConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(ConfabConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n                    ConfabConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n                    ConfabConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n                    ConfabConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n                    ConfabConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nConfabConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nConfabConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(ConfabConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(ConfabConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(ConfabConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(ConfabConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(ConfabConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nConfabConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nConfabConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            ConfabConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","export enum ConfabTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling ConfabRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = ConfabTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = ConfabTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = ConfabTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = ConfabTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = ConfabTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = ConfabTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * ConfabConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {ConfabConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in ConfabParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in ConfabLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(ConfabConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(ConfabConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                ConfabConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                ConfabConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to ConfabRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            ConfabConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                ConfabConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                ConfabConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            ConfabConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            ConfabConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            ConfabConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {ConfabParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                ConfabConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {ConfabRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {ConfabTrack} remoteTrack - The {ConfabTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                ConfabTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                ConfabTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {ConfabRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                ConfabTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {ConfabParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in ConfabLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {ConfabRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {ConfabRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {ConfabRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {ConfabRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as ConfabConferenceEvents from './ConfabConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class ConfabParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new ConfabParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new ConfabParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {ConfabConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>ConfabParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>ConfabTrack</tt>s which are muted as defined in\n     * {@link ConfabTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                confabTrack =>\n                    confabTrack.getType() === MediaType.VIDEO\n                        && confabTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                ConfabConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<ConfabTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<ConfabTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return Boolean(this._identity?.user?.['hidden-from-recorder']);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all ConfabTracks which are of a specific MediaType and\n     * which belong to this ConfabParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the ConfabTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all ConfabTracks which are of the specified\n     * mediaType and which belong to this ConfabParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum ConfabConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {ConfabConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = ConfabConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = ConfabConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = ConfabConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = ConfabConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = ConfabConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum ConfabConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-confab\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = ConfabConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = ConfabConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = ConfabConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = ConfabConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from 'logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kConfabE2EE = Symbol('kConfabE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-confab\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-confab.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kConfabE2EE]) {\n            return;\n        }\n        receiver[kConfabE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kConfabE2EE]) {\n            return;\n        }\n        sender[kConfabE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {ConfabConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            ConfabConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            ConfabConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            ConfabConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {ConfabLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {ConfabLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {ConfabLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from 'logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, CONFAB_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(ConfabConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(ConfabConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(ConfabConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {ConfabParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[CONFAB_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {ConfabParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {ConfabParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {ConfabParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [CONFAB_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from 'logger';\nimport debounce from 'lodash.debounce';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            ConfabConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            ConfabConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            ConfabConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                ConfabConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {ConfabParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link ConfabConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {ConfabConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from 'logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-confab doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link ConfabMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link ConfabMeetJS.setNetworkInfo} like the confabbox does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from 'logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from 'logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from 'logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-confab layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-confab-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum ConfabTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = ConfabTranscriptionStatus.ON;\nexport const OFF = ConfabTranscriptionStatus.OFF;\n","import { getLogger } from 'logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from 'logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from 'logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { confabLocalStorage } from 'js-utils';\nimport { getLogger } from 'logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: confabLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of confabLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || confabLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('confabMeetId');\n\n            if (amDid) {\n                this._storage.setItem('confabMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateConfabMeetId();\n                this._storage.setItem('confabMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another ConfabConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateConfabMeetId() {\n    const confabMeetId = generateUniqueId();\n\n    logger.log('generated id', confabMeetId);\n\n    return confabMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in confabbox). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as ConfabTranscriptionStatus from '../../ConfabTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = ConfabTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"confab_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('confab_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'confab_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport ConfabTrackError from '../../ConfabTrackError';\nimport * as ConfabTrackErrors from '../../ConfabTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.ConfabboxNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let confabError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-confab. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-confab will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            confabError = new ConfabTrackError(\n                                ConfabTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            confabError = new ConfabTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(confabError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.ConfabboxScreenObtainer && window.ConfabboxScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.ConfabboxScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new ConfabTrackError(ConfabTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new ConfabTrackError(\n                    ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new ConfabTrackError(ConfabTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const setScreenSharingResolutionConstraints = browser.isChromiumBased()\n            && this.options?.testing?.setScreenSharingResolutionConstraints;\n        let video = {};\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n        if (setScreenSharingResolutionConstraints) {\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311\n            video.height = 99999;\n            video.width = 99999;\n        }\n\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new ConfabTrackError(ConfabTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new ConfabTrackError(ConfabTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new ConfabTrackError(ConfabTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from 'logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from 'logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from 'logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * \n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection\n         * in lieu of localRecvMaxFrameHeight when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Confabbox\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<ConfabLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<ConfabLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<ConfabLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive\n                                || this.localRecvMaxFrameHeight\n                                || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n            logger.info(`${this} sending content-modify, video senders: ${senders},`\n                + ` max frame height: ${maxFrameHeight}`);\n        }\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(maxFrameHeight, sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`\n            + ` sourceReceiverConstraints: ${sourceReceiverConstraints}`);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._sourceReceiverConstraints = sourceReceiverConstraints;\n        } else {\n            this.localRecvMaxFrameHeight = maxFrameHeight;\n        }\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const confabLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, confabLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary ConfabLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<ConfabLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add transceivers by adding a new mline in the remote description for each track.\n            for (const track of localTracks) {\n                remoteSdp.addMlineForNewLocalSource(track.getType());\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {ConfabLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {ConfabLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (FeatureFlags.isSourceNameSignalingEnabled()\n                            && oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {ConfabLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {ConfabLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {ConfabLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as ConfabConnectionErrors from '../../ConfabConnectionErrors';\nimport * as ConfabConnectionEvents from '../../ConfabConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-confab's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const CONFAB_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                ConfabConnectionEvents.CONNECTION_FAILED,\n                ConfabConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.info('SSRC rewriting is supported');\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    ConfabConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    ConfabConnectionEvents.CONNECTION_FAILED,\n                    ConfabConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    ConfabConnectionEvents.CONNECTION_FAILED,\n                    ConfabConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    ConfabConnectionEvents.CONNECTION_FAILED,\n                    ConfabConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    ConfabConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        ConfabConnectionEvents.CONNECTION_FAILED,\n                        ConfabConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        ConfabConnectionEvents.CONNECTION_FAILED,\n                        ConfabConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                ConfabConnectionEvents.CONNECTION_FAILED,\n                ConfabConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(ConfabConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-confab-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[CONFAB_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[CONFAB_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[CONFAB_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[CONFAB_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[CONFAB_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './ConfabConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {ConfabConnectionErrors} [connectionError] - One of\n * {@link ConfabConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {ConfabConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            ConfabConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            ConfabConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            ConfabConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link ConfabConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from 'logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport ConfabTrackError from '../../ConfabTrackError';\nimport * as ConfabTrackErrors from '../../ConfabTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-confab receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new ConfabTrackError(ConfabTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const confabError = new ConfabTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(confabError);\n                    }\n\n                    if (confabError.name === ConfabTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new ConfabTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new ConfabTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from 'logger';\nimport EventEmitter from 'events';\n\nimport * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class ConfabTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the ConfabTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this ConfabTrack has been disposed. If true, this\n         * ConfabTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link ConfabConference#addTrack(ConfabTrack)},\n         * {@link ConfabConference#removeTrack(ConfabTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of ConfabTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this ConfabTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this ConfabTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this ConfabTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending ConfabTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending ConfabTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending ConfabTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                ConfabTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the ConfabTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits ConfabTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        ConfabTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from 'logger';\n\nimport ConfabTrackError from '../../ConfabTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../ConfabTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../ConfabTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport ConfabTrack from './ConfabTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>ConfabLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class ConfabLocalTrack extends ConfabTrack {\n    /**\n     * Constructs a new ConfabLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new ConfabLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the ConfabLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the ConfabLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the ConfabLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this ConfabLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in confabbox with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this ConfabLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this ConfabLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new ConfabTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from confabbox instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new ConfabTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of ConfabLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends ConfabTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        let removeTrackPromise = Promise.resolve();\n\n        if (this.conference) {\n            removeTrackPromise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return Promise.allSettled([ promise, removeTrackPromise ]).then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Confabbox.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the confab track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the ConfabConference object associated with the track. This is temp solution.\n     *\n     * @param conference - ConfabConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in ConfabLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the confab track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>ConfabTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n            }\n            mLine.fingerprint = newFingerprint;\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Confab Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForConfabTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForConfabTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from 'logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForConfabTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists && trackId) {\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                trackIndex = streamId.split('-')[2];\n            }\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForConfabTrack(this.localEndpointId, mediaType, trackIndex)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from 'logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from 'logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n\n    /**\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\n     *\n     * @param description\n     * @returns\n     */\n    mungeRemoteDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n\n        const session = transform.parse(description.sdp);\n\n        for (const media of session.media) {\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n\n            if (media.direction !== MediaDirection.SENDONLY) {\n                continue;\n            }\n\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\n                continue;\n            }\n\n            // Cache the SSRCs and the source groups.\n            const mungedSsrcs = new Set(media.ssrcs.slice());\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\n\n            // When simulcast and RTX are both enabled.\n            if (fidGroups.length && simGroup) {\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\n\n                for (const ssrcGroup of media.ssrcGroups) {\n                    if (ssrcGroup !== fidGroup) {\n                        mungedSsrcGroups.delete(ssrcGroup);\n                    }\n                }\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc\n                        && ssrc.id.toString() !== secondarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n\n            // When simulcast is enabled but RTX is disabled.\n            } else if (simGroup) {\n                mungedSsrcGroups.delete(simGroup);\n\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n            }\n\n            media.ssrcs = Array.from(mungedSsrcs);\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\n        }\n\n        return new RTCSessionDescription ({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from 'logger';\n\nimport { ConfabConferenceEvents } from '../../ConfabConferenceEvents';\nimport * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport ConfabConference from '../../types/hand-crafted/ConfabConference';\nimport ConfabRemoteTrack from '../../types/hand-crafted/modules/RTC/ConfabRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: ConfabConference;\n    track: ConfabRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in ConfabLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: ConfabConference, track: ConfabRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(ConfabConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(ConfabConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to ConfabRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(ConfabTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(ConfabTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(ConfabConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(ConfabTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(ConfabConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(ConfabConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(ConfabConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the ConfabRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in ConfabLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=${\n            enteringForwardedSources} at ${timestamp}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: ConfabRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: ConfabRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: ConfabRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: ConfabRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport ConfabTrack from './ConfabTrack';\n\nconst logger = require('logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class ConfabRemoteTrack extends ConfabTrack {\n    /**\n     * Creates new ConfabRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {ConfabConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new ConfabRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(ConfabTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(ConfabTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|ConfabRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Confabbox.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(ConfabTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {ConfabLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {ConfabLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link ConfabLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {ConfabLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {ConfabLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {ConfabLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {ConfabLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {ConfabLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {ConfabLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'.\n                // When multi-stream is enabled, there can be multiple transceivers with outbound streams.\n                if (idx < localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from 'logger';\nimport { Interop } from 'sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForConfabTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast.ts';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConfabRemoteTrack from './ConfabRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<ConfabRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link ConfabLocalTrack.rtcId}\n     * @type {Map<number, ConfabLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link ConfabLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<ConfabLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {ConfabLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<ConfabRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link ConfabTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {ConfabTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link ConfabTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForConfabTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new ConfabRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(confabTrack => confabTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new ConfabRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all ConfabRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {ConfabRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>ConfabRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {ConfabRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n                || mline.direction === MediaDirection.SENDRECV);\n        } else {\n            media = [];\n            [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n                const mLine = session.media.find(m => m.type === mediaType);\n\n                mLine && media.push(mLine);\n            });\n        }\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan\n                ? FeatureFlags.isMultiStreamSupportEnabled() ? `${mLine.type}-${index}` : mLine.type\n                : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For confab, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {ConfabLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link ConfabLocalTrack} to this TPC.\n * @param {ConfabLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {ConfabLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {ConfabLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {ConfabLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {ConfabLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {ConfabLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\n    const isNewTrackScreenshare = !oldTrack\n        && newTrack?.getVideoType() === VideoType.DESKTOP\n        && FeatureFlags.isMultiStreamSupportEnabled()\n        && !this.isP2P; // negotiationneeded is not fired on p2p peerconnection\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Force renegotiation only when the source is added for the first time.\n                return configureEncodingsPromise.then(() => negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {ConfabLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrackMute', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrackMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrackMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {ConfabLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n\n            if (FeatureFlags.isRunInLiteModeEnabled()) {\n                remoteDescription = this._mungeInactive(remoteDescription);\n            }\n        }\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {ConfabLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        let sourceIndex, sourceName;\n\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            sourceName = track.getSourceName();\n            sourceIndex = sourceName?.indexOf('-') + 2;\n        }\n\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? FeatureFlags.isMultiStreamSupportEnabled() && sourceIndex\n                ? `${track.getType()}-${sourceName.substr(sourceIndex, 1)}` : track.getType()\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {ConfabLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport ConfabLocalTrack from './ConfabLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code ConfabLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in ConfabLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new ConfabLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * ConfabLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<ConfabLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new ConfabTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            ConfabConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        this.conference.eventEmitter.emit(\n            ConfabConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            Date.now());\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {ConfabLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<ConfabLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {ConfabLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<ConfabRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from 'logger';\n\nimport * as ConferenceEvents from '../../ConfabConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning ConfabConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-confab handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in confabbox-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceErrors from '../../ConfabConferenceErrors';\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@ConfabConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {ConfabConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? ConfabConferenceErrors.CONFERENCE_RESTARTED\n                : ConfabConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a ConfabConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a ConfabConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the ConfabConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(ConfabConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a ConfabTrack was added to the associated ConfabConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {ConfabTrack} track - The added ConfabTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    ConfabTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the ConfabConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            ConfabConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio ConfabLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {ConfabLocalTrack} confabLocalTrack - ConfabLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, confabLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The ConfabLocalTrack instance.\n         */\n        this._localTrack = confabLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create confab local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from 'logger';\nimport { EventEmitter } from 'events';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {ConfabConference} conference - ConfabConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link ConfabLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(ConfabConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(ConfabConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(ConfabConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link ConfabConference}.\n     * Only take into account local audio tracks.\n     * @param {ConfabTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link ConfabConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {ConfabTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link ConfabConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {ConfabTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport * as ConfabE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single ConfabParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {ConfabParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The ConfabParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                ConfabE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the confab-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {ConfabConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(ConfabConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(ConfabConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(ConfabConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {ConfabParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(ConfabConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(ConfabConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(ConfabConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link ConfabConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {ConfabConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            ConfabConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            ConfabConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            ConfabConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                ConfabConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/confabbox/confab-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link ConfabConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {ConfabConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        /**\n         * The map that holds the max frame height requested for each remote source when source-name signaling is\n         * enabled.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            ConfabConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {number} maxFrameHeight\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return null;\n        }\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), maxFrameHeight);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link ConfabConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight, this._sourceReceiverConstraints);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                session.setReceiverVideoConstraint(\n                    maxFrameHeight,\n                    this._getDefaultSourceReceiverConstraints(this._maxFrameHeight));\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                    .map(constraint => {\n                        constraint[1] = constraint[1].maxHeight;\n\n                        return constraint;\n                    });\n\n                this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n                // Send the receiver constraints to the peer through a \"content-modify\" message.\n                p2pSession.setReceiverVideoConstraint(null, this._sourceReceiverConstraints);\n            } else {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from 'logger';\n\nimport * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link ConfabConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {ConfabConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            ConfabConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            ConfabConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link ConfabConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n-    * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n                (session, sourceConstraints) => {\n                    session === this._conference.getActiveMediaSession()\n                        && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n                });\n        } else {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                session => session === this._conference.getActiveMediaSession()\n                    && this._configureConstraintsForLocalSources());\n        }\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? sourceName\n                    ? this._sourceSenderConstraints.get(sourceName)\n                    : activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {ConfabParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {ConfabParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {ConfabParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {ConfabParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from 'logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'logger';\n\nimport * as ConferenceEvents from '../../ConfabConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {ConfabConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from 'logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../ConfabConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link ConfabParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {ConfabConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link ConfabParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {ConfabConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {ConfabConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {ConfabParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {ConfabParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as ConfabConferenceEvents from '../../ConfabConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {ConfabConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            ConfabConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            ConfabConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            ConfabConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            ConfabConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            ConfabConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {ConfabParticipant} - The ConfabParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single ConfabTrack (either remote or local)\n * @param track The ConfabTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The ConfabTrack the object is going to hold\n     */\n    constructor(track) {\n        // The ConfabTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the ConfabTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a ConfabTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a ConfabTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param confabConference the confabConference which this object\n * is going to record\n */\nfunction AudioRecorder(confabConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the ConfabTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the confabconference the object is recording\n    this.confabConference = confabConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the ConfabTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {ConfabTrack} track the ConfabTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.confabConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a ConfabTrack holding an audioStream to transcribe.\n * The ConfabTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {ConfabTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>ConfabConference</tt>.\n * @param conference <tt>ConfabConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from 'logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Confab video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class ConfabVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ConfabVideoSIPGWSession from './ConfabVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, ConfabConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per ConfabConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {ConfabVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new ConfabVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n        const lastPresence = this.chatRoom.getLastPresence(owner);\n\n        if (!lastPresence) {\n            throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'confab_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","/* global $ */\n\nimport { getLogger } from 'logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as ConfabConferenceErrors from './ConfabConferenceErrors';\nimport ConfabConferenceEventManager from './ConfabConferenceEventManager';\nimport * as ConfabConferenceEvents from './ConfabConferenceEvents';\nimport ConfabParticipant from './ConfabParticipant';\nimport ConfabTrackError from './ConfabTrackError';\nimport * as ConfabTrackErrors from './ConfabTrackErrors';\nimport * as ConfabTrackEvents from './ConfabTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    CONFAB_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForConfabTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a ConfabConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using ConfabConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the ConfabConnection object for this\n * ConfabConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link ConfabConference.onLocalRoleChanged}\n *       {@link ConfabConference.onUserRoleChanged}\n *       {@link ConfabConference.onMemberLeft}\n *       and so on...\n */\nexport default function ConfabConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new ConfabConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert ConfabConference to ES6 - ASAP !\nConfabConference.prototype.constructor = ConfabConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nConfabConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {ConfabConnection} overrides this.connection\n */\nConfabConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        ConfabConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(ConfabConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(ConfabConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(ConfabConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(ConfabConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link ConfabConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nConfabConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nConfabConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: ConfabConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nConfabConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nConfabConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nConfabConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nConfabConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nConfabConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nConfabConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nConfabConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {ConfabLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nConfabConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nConfabConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link ConfabConnection} used by this this conference.\n */\nConfabConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nConfabConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nConfabConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nConfabConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nConfabConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nConfabConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nConfabConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {ConfabLocalTrack|null}\n */\nConfabConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {ConfabLocalTrack|null}\n */\nConfabConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<ConfabLocalTrack>}\n */\nConfabConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nConfabConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in ConfabConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nConfabConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nConfabConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nConfabConference.prototype.addEventListener = ConfabConference.prototype.on;\nConfabConference.prototype.removeEventListener = ConfabConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nConfabConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nConfabConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nConfabConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nConfabConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nConfabConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nConfabConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nConfabConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nConfabConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nConfabConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nConfabConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nConfabConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds ConfabLocalTrack object to the conference.\n * @param {ConfabLocalTrack} track the ConfabLocalTrack object.\n * @returns {Promise<ConfabLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nConfabConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const sourceName = getSourceNameForConfabTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nConfabConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // ConfabTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            ConfabConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the ConfabTrack object related to the event.\n */\nConfabConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(ConfabConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<ConfabLocalTrack>} - list of local tracks that are unmuted.\n */\nConfabConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear ConfabLocalTrack properties and listeners.\n * @param track the ConfabLocalTrack object.\n */\nConfabConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(ConfabTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(ConfabConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes ConfabLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {ConfabLocalTrack} track\n * @returns {Promise}\n */\nConfabConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {ConfabLocalTrack} oldTrack the current stream in use to be replaced\n * @param {ConfabLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nConfabConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && newTrack) {\n        if (oldTrack) {\n            newTrack.setSourceName(oldTrack.getSourceName());\n        } else {\n            const sourceName = getSourceNameForConfabTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            newTrack.setSourceName(sourceName);\n        }\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new ConfabTrackError(ConfabTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new ConfabTrackError(ConfabTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`ConfabConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // We do not want to send presence update during setEffect switching, which removes and then adds the same\n            // track back to the conference.\n            if (!(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {ConfabLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {ConfabLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nConfabConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nConfabConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(ConfabConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {ConfabLocalTrack} newTrack the new track being created\n */\nConfabConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForConfabTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(ConfabTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(ConfabConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nConfabConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nConfabConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link ConfabLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {ConfabLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nConfabConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link ConfabLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {ConfabLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nConfabConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nConfabConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nConfabConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nConfabConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nConfabConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(ConfabConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nConfabConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nConfabConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nConfabConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nConfabConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nConfabConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nConfabConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nConfabConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<ConfabParticipant> an array of all participants in this\n * conference.\n */\nConfabConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nConfabConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {ConfabParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nConfabConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nConfabConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nConfabConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nConfabConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nConfabConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nConfabConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nConfabConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this ConfabConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nConfabConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new ConfabParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        ConfabConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nConfabConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {ConfabParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nConfabConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nConfabConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            ConfabConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nConfabConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(ConfabConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(ConfabConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nConfabConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            ConfabConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        ConfabConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nConfabConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        ConfabConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nConfabConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(ConfabConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nConfabConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        ConfabConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this ConfabConference that a ConfabRemoteTrack was added to the conference.\n *\n * @param {ConfabRemoteTrack} track the ConfabRemoteTrack which was added to this ConfabConference.\n */\nConfabConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to ConfabParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        ConfabTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(ConfabConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(ConfabConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(ConfabConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nConfabConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(ConfabConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nConfabConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this ConfabConference that a ConfabRemoteTrack was removed from\n * the conference.\n *\n * @param {ConfabRemoteTrack} removedTrack\n */\nConfabConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(ConfabConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nConfabConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nConfabConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nConfabConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(ConfabConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(ConfabConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(ConfabConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'confab' /* Remote user ID for JVB is 'confab' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nConfabConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nConfabConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nConfabConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nConfabConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(ConfabConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nConfabConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            ConfabConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nConfabConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nConfabConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nConfabConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nConfabConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nConfabConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nConfabConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nConfabConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nConfabConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nConfabConference.prototype.startTranscriber = function() {\n    return this.dial('confabbox_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nConfabConference.prototype.stopTranscriber = ConfabConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nConfabConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nConfabConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nConfabConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nConfabConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nConfabConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nConfabConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nConfabConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nConfabConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nConfabConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nConfabConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nConfabConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`confab_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nConfabConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`confab_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nConfabConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `confab_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nConfabConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nConfabConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nConfabConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {ConfabLocalTrack|ConfabRemoteTrack} track the track\n * @param container the container\n */\nConfabConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'confab';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-confab and confabbox is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nConfabConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nConfabConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nConfabConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED,\n        ConfabConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nConfabConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nConfabConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nConfabConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by confabbox and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * confab-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through confab-videobridge.\n */\nConfabConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(CONFAB_MUC_TYPE)) {\n                messageToSend[CONFAB_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nConfabConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nConfabConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(ConfabConferenceEvents.CONFERENCE_FAILED, ConfabConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nConfabConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(ConfabConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nConfabConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nConfabConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(ConfabConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nConfabConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                ConfabConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nConfabConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nConfabConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<ConfabRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nConfabConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nConfabConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // ConfabConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(ConfabConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nConfabConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(ConfabConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(ConfabConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(ConfabConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of confab-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nConfabConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nConfabConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nConfabConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nConfabConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<ConfabRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nConfabConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nConfabConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>ConfabConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nConfabConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        ConfabConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(ConfabConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? ConfabConferenceEvents.CONNECTION_INTERRUPTED\n            : ConfabConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nConfabConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nConfabConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nConfabConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nConfabConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nConfabConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nConfabConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n    const localAudioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n    const localVideoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nConfabConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the confabbox-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nConfabConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nConfabConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nConfabConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nConfabConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nConfabConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nConfabConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nConfabConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nConfabConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nConfabConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link ConfabConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {ConfabVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nConfabConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nConfabConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nConfabConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nConfabConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nConfabConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nConfabConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nConfabConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nConfabConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nConfabConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nConfabConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nConfabConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nConfabConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nConfabConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nConfabConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nConfabConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nConfabConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nConfabConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nConfabConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nConfabConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nConfabConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nConfabConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nConfabConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nConfabConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nConfabConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nConfabConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n","import ConfabConference from './ConfabConference';\nimport * as ConfabConnectionEvents from './ConfabConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Confabbox server side video\n * conferencing service. Provides access to the ConfabConference interface.\n * @param appID identification for the provider of Confabbox video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function ConfabConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(ConfabConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(ConfabConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nConfabConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nConfabConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nConfabConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to ConfabConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of ConfabConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nConfabConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nConfabConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {ConfabConference} returns the new conference object.\n */\nConfabConnection.prototype.initConfabConference = function(name, options) {\n    return new ConfabConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {ConfabConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nConfabConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {ConfabConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nConfabConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nConfabConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nConfabConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nConfabConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nConfabConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum ConfabMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = ConfabMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = ConfabMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = ConfabMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = ConfabMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as ConfabMediaDevicesEvents from './ConfabMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Confab.\n */\nclass ConfabMediaDevices {\n    /**\n     * Initializes a {@code ConfabMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    ConfabMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(ConfabMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new ConfabMediaDevices();\n","import { getLogger } from 'logger';\n\nimport * as ConfabTrackEvents from '../../ConfabTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(ConfabTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(ConfabTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-confab publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided ConfabLocalTracks.\n *\n * @param {Array<ConfabLocalTrack>} deviceList - Array of ConfabLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from 'logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code ConfabTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<ConfabTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<ConfabLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire confabbox config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code ConfabConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code ConfabConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code ConfabConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {ConfabRemoteTrack} confabRemoteTrack - The remote media stream\n     * wrapped in {@code ConfabRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(confabRemoteTrack) {\n        this._tracks.push(confabRemoteTrack);\n\n        this._options.onRemoteStream(confabRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'logger';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {ConfabConnection} [options.confabConnection] - The {@code ConfabConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code ConfabLocakTrack}. The {@code ConfabLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            confabConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: confabConnection && confabConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<ConfabLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code ConfabLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {ConfabRemoteTrack} confabRemoteTrack - The {@code ConfabRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(confabRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            confabRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = confabRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = confabRemoteTrack.getOriginalStream();\n        const confabLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(confabLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from 'logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from 'logger';\n\nimport * as ConfabConferenceErrors from './ConfabConferenceErrors';\nimport * as ConfabConferenceEvents from './ConfabConferenceEvents';\nimport ConfabConnection from './ConfabConnection';\nimport * as ConfabConnectionErrors from './ConfabConnectionErrors';\nimport * as ConfabConnectionEvents from './ConfabConnectionEvents';\nimport ConfabMediaDevices from './ConfabMediaDevices';\nimport * as ConfabMediaDevicesEvents from './ConfabMediaDevicesEvents';\nimport ConfabTrackError from './ConfabTrackError';\nimport * as ConfabTrackErrors from './ConfabTrackErrors';\nimport * as ConfabTrackEvents from './ConfabTrackEvents';\nimport * as ConfabTranscriptionStatus from './ConfabTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link ConfabMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code ConfabMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Confabbox family. If lib-confab\n * is loaded through an HTML {@code script} tag, {@code ConfabMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code ConfabMeetJS} but is not OK for the namespace {@code ConfabMeetJS}\n * because it may already contain the values of other projects in the Confabbox\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code ConfabMeetJS} into the module\n * {@code ConfabMeetJS}.\n *\n * @param {Object} module - The module {@code ConfabMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code ConfabMeetJS} module which contains all existing\n * value of the namespace {@code ConfabMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.ConfabMeetJS === 'object'\n            ? Object.assign({}, window.ConfabMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Confabbox library (a.k.a. {@code ConfabMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    ConfabConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Confab participant without going through a Confab conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: ConfabTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: ConfabConferenceEvents,\n        connection: ConfabConnectionEvents,\n        detection: DetectionEvents,\n        track: ConfabTrackEvents,\n        mediaDevices: ConfabMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: ConfabConferenceErrors,\n        connection: ConfabConnectionErrors,\n        track: ConfabTrackErrors\n    },\n    errorTypes: {\n        ConfabTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: ConfabMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined' && options.flags) {\n            options.flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-confab',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * ConfabMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * ConfabMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-confab that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<ConfabTrack>}, ConfabConferenceError>} A promise\n     * that returns an array of created ConfabTracks if resolved, or a\n     * ConfabConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            ConfabMediaDevices.emitEvent(\n                ConfabMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    ConfabMediaDevices.emitEvent(ConfabMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                ConfabTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === ConfabTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === ConfabTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use ConfabMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'ConfabMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use ConfabMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'ConfabMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use ConfabMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'ConfabMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-confab about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-confab clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","userId","displayName","isLocalStats","this","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFaceExpressions","setFaceExpressions","faceExpressions","addFaceExpression","faceExpression","duration","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","replace","EventEmitterForwarder","src","dest","addListener","emit","Error","prototype","forward","args","srcEvent","Function","bind","apply","handlers","oldOnErrorHandler","window","onerror","oldOnUnhandledRejection","onunhandledrejection","forEach","handler","event","reason","GlobalOnErrorHandler","addHandler","push","callErrorHandler","error","errHandler","callUnhandledRejectionHandler","randomInt","min","max","Math","floor","random","randomElement","arr","length","RandomUtil","randomHexDigit","randomHexString","len","ret","randomAlphanumStr","result","i","currentExecutingScript","require","ScriptUtil","loadScript","async","prepend","relativeURL","loadCallback","errorCallback","d","document","tagName","script","createElement","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","substring","lastIndexOf","onload","parentNode","insertBefore","appendChild","integerHash","string","char","hash","charCodeAt","pow","abs","names","generateUsername","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","join","Uint8Array","Array","code","indexOf","start","end","num","output","e","t","r","n","l","call","m","c","o","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","default","hasOwnProperty","p","s","getFirstMatch","match","getSecondMatch","matchAndReturnConst","test","getWindowsVersionName","getMacOSVersionName","split","splice","map","parseInt","getAndroidVersionName","getVersionPrecision","compareVersions","a","u","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","key","getParser","parse","getResult","_ua","parsedResult","getUA","parseBrowser","browser","find","some","describe","getBrowser","getBrowserName","String","name","toLowerCase","getBrowserVersion","version","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","type","getEngine","engine","parseEngine","getEngineName","assign","satisfies","keys","isOS","isPlatform","f","isBrowser","compareVersion","substr","isEngine","is","search","versionName","vendor","model","Number","scriptReadyRegex","fullPageUrl","location","href","pageUrl","scripts","supportsScriptReadyState","isNotOpera","toString","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","stack","skipStackDepth","matches","url","ignoreMessage","round","slice","_nearestExecutingScript","eligibleScripts","readyState","err","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","objectCreate","proto","F","objectKeys","obj","k","context","fn","arguments","EventEmitter","_events","_eventsCount","_maxListeners","undefined","hasDefineProperty","defaultMaxListeners","x","$getMaxListeners","that","emitNone","isFn","listeners","arrayClone","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","_addListener","target","listener","events","existing","TypeError","newListener","unshift","warned","w","emitter","count","console","warn","message","onceWrapper","fired","removeListener","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","listenerCount","copy","set","arg","setMaxListeners","isNaN","getMaxListeners","er","doError","on","prependListener","once","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","removeAllListeners","rawListeners","eventNames","Reflect","ownKeys","ERROR","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","isArray","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","b","bc","da","hex","array","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","size","overArg","func","transform","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getPrototype","getPrototypeOf","propertyIsEnumerable","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Promise","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","source","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","values","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","data","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","resolve","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","options","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","setTimeout","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","clearTimeout","flush","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","Logger","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","timestamp","prevMessage","prevMessageText","text","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","globalTransports","addGlobalTransport","transport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","log","logger","level","disableCallerInfo","transports","concat","logPrefixes","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","getUntrackedLogger","setLogLevelById","setLogLevel","grammar","v","reg","format","z","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","maxMessageSize","params","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","parser","writer","write","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","content","needsBlank","keyLocation","rawName","attachProperties","validLine","sdp","session","media","filter","rtp","fmtp","j","paramReducer","acc","expr","reduce","candidates","component","ip","port","item","stream","scid","paused","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","opts","mLine","payloads","outerOrder","innerOrder","el","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","group","semantics","ssrcStr","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","_restoreSimulcast","numSsrcs","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","SDPUtils","localCName","generateIdentifier","splitLines","blob","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","priority","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","iterator","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","y","lsw","str2binl","bin","md5_cmn","q","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","validAttribute","validCSS","style","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","sort","attr","setAttribute","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","getAttribute","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","serialize","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","reset","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","callback","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","firstChild","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","lang","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","off","stringToBytes","uuidToBytes","idx","DNS","URL","rnds","_sha","logDisabled_","deprecationWarnings_","extractVersion","uastring","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","addEventListener","nativeEventName","cb","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","removeEventListener","unwrappedCb","delete","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","navigator","mozGetUserMedia","userAgent","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","supportsUnifiedPlan","RTCRtpTransceiver","val","compactObject","isEmptyObject","walkStats","stats","base","resultSet","endsWith","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","trackId","shimGetUserMedia","browserDetails","mediaDevices","constraintsToChrome_","mandatory","optional","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","constraints","audio","remap","video","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","then","devices","dev","label","includes","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onError","origGetUserMedia","cs","getAudioTracks","getVideoTracks","getTracks","DOMException","reject","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","width","heightSpecified","height","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","setRemoteDescription","_ontrackpoly","te","receiver","getReceivers","Event","transceiver","streams","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","pc","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","addTrack","sender","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","RTCRtpSender","origGetSenders","senders","shimGetStats","origGetStats","getStats","selector","onSucc","onErr","fixChromeStats_","standardReport","report","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","RTCRtpReceiver","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","streamId","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","signalingState","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","setLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","RTCIceCandidate","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","parseFloat","scaleResolutionDownBy","RangeError","maxFramerate","getParameters","encodings","setParameters","catch","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","createOffer","all","finally","shimCreateAnswer","origCreateAnswer","createAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","addIceCandidate","successCallback","failureCallback","promise","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","iceServers","newIceServers","server","urls","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","offerToReceiveAudio","audioTransceiver","getTransceivers","setDirection","offerToReceiveVideo","videoTransceiver","shimAudioContext","AudioContext","webkitAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","sdpMid","sdpMLineIndex","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","isFirefox","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","createDataChannel","dataChannel","channel","shimConnectionState","completed","checking","iceConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","AV1","H264","OPUS","ULPFEC","VP8","VP9","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","FORWARDED_SOURCES_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VideoType","IDENTITY_UPDATED","LOCAL_JID","XMPPEvents","ConfabConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","ConfabConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","CALLSTATS_SCRIPT_URL","ConfabTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","ConfabTrackError","gum","failedConstraintName","minWidth","minHeight","getResolutionFromFailedConstraint","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToConfabName","_detectElectron","ConfabboxElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","confabLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","mimeType","supportsVADDetection","supportsRTX","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","reportsQueue","errorData","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","addresses","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","task","observer","observe","buffered","startTime","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","MediaType","flags","_runInLiteMode","runInLiteMode","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_ssrcRewriting","ssrcRewritingOnBridgeSupported","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isRunInLiteModeEnabled","isSourceNameSignalingEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatConfabTrackErrorForCallStats","sendLog","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","ConfabConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","ConfabTrackEvents","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","jingleSession","rtc","closeBridgeChannel","participant","getParticipantById","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","isVideoTrack","videoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","ConfabParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","getConference","getProperty","confabTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isHiddenFromRecorder","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","ConfabConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","ConfabConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kConfabE2EE","E2EEcontext","sharedKey","baseUrl","ljm","workerUrl","workerBlob","Blob","createObjectURL","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","CONFAB_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","retry","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","ConfabTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","confabMeetId","_p8","generateConfabMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","errorIq","prop","getLoginUrl","urlCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","hiddenFromRecorderFeatureEnabled","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","ConfabboxNW","obtainDesktopStream","confabError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","ConfabboxScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","minFrameRate","screen","sourceType","setScreenSharingResolutionConstraints","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","RECVONLY","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","contents","jingle2media","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","wrapAsync","asyncFn","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","_asyncMap","results","counter","_iteratee","iterCb","breakLoop","callFn","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","asyncIterator","isAsyncIterable","nextElem","coll","createArrayIterator","okeys","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","iteratorCallback","eachOfGeneric","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","setInitial","toArray","cur","testFn","curr","dll","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","started","_tasks","_createCB","tasks","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","pushAsync","kill","unshiftAsync","defineProperties","memo","mapLimit$1","concatLimit$1","mapResults","_createTester","check","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","innerArgs","ensureAsync","newObj","taskCb","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","jcand","errorMesssage","sendIceCandidates","cands","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","iceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","audioTracks","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","confabLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","answer","offer","replaceTracks","oldLocalSDP","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","setSourceName","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","credential","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","deploymentInfo","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFaceExpressionEvent","expression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","jsonObject","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","attachMediaStream","getStreamID","getTrackID","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","ConfabTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","setAudioOutput","ConfabLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrackPromise","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForConfabTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","mungedSsrcs","mungedSsrcGroups","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","ConfabRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","localStreamEncodingsConfig","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","isNewLocalSource","currentDirection","setEncodings","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","ConfabE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","_getDefaultSourceReceiverConstraints","remoteVideoTracks","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","confabConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","click","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","DONE","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","ConfabVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","ConfabConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","ConfabConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","ConfabMediaDevicesEvents","resourceCreator","isAuthenticatedUser","re","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initConfabConference","getLogs","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","confabRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","ConfabMeetJS","ProxyConnectionService","confabConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","isVideo","convertVideoToDesktop","confabLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","ConfabMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}